// TODO: Format the content
a. Give me the output
    let i;
    for (i = 0; i < 3; i++) {
    const log = () => {
        console.log(i);
    }
    setTimeout(log, 100);
    }

    // output 
    3
    3
    3
    
    

    for (let i = 0; i < 3; i++) {
    const log = () => {
        console.log(i);
    }
    setTimeout(log, 100);
    }

    // output 
    3
    3
    3
 
 
b. floating point arithmetic
 
 2.2 + 2.3 === 4.5
 
 4.44444449
 
 .toFixed(2)
 
 
 
c. give me the output 
function cal() {
  let a = b = 0;
  a++;
  return a;
}

cal();
typeof a; // => ???
typeof b; // => ???


output
// typeof a ==> undefined
// typeof b ==> number


console.log(obj.a);//1
console.log(obj.a);//2
console.log(obj.a);//3


var obj2= (function(){

var num = 0;

	return (function(){
		
		return {
			a: (function(){
			 num = num + 1;
			 return num;
			})()
		};
	})()
});
  
var obj = obj2();
console.log(obj.a);//1
console.log(obj.a);//2
console.log(obj.a);//3

d. discuss high level how vuex works

e. check if a property exists in a path:

var employee = {
	firstName: 'Peter',
	child:{
	secondName:'Dinklage',
	child:{
		role: {
			admin: {
				access:true
			}
		}
		}	
	}};
	
	
	var isPropertyExists = function(obj, propName){
	
	
		
		if(!obj){
		
		return false; 
		
		}
		
	 
	var objKeys = Object.keys(obj);
	
	console.log(objKeys);	
	if(!!objKeys[propName]){
		return objKeys[propName];			
	}
	
	for(var iterator = 0; iterator < objKeys; iterator++){
	
			var isExists = 	isPropertyExists(objKeys[iterator], propName);
			
			if(isExists){
				return true;	
			}
	
	
	}
	
	}

console.log(isPropertyExists(employee, 'access'))

a. Play with promise
b. Play with js functional approach - map, reduce, filter
c. ES6 class getter












